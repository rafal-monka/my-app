{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","filteredUsers","allContacts","tytul","this","props","className","onInput","filterUsers","bind","type","placeholder","lista","e","text","currentTarget","value","getFilteredUsersForText","setState","Promise","resolve","time","Math","random","setTimeout","console","log","filter","user","title","toLowerCase","includes","fetch","mode","then","response","json","data","catch","err","React","Component","ContactList","length","map","item","inx","id","opis","desc","ContactItem","toString","key","onClick","onClickHandler","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,oMCiCrCC,E,kDACJ,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,cAAeC,GAJT,E,qDAQJ,IACCC,EAASC,KAAKC,MAAdF,MACP,OACI,6BACI,0BAAMG,UAAU,0BACZ,4BAAKH,GACL,yBAAKG,UAAU,YACX,2BAAOC,QAASH,KAAKI,YAAYC,KAAKL,MAC/BM,KAAK,OAAOC,YAAY,eAElCP,KAAKJ,MAAMC,cAAgB,kBAAC,EAAD,CAAaW,MAAOR,KAAKJ,MAAMC,cAAeE,MAAOA,IAAW,2B,kCAMhGU,GACR,IAAMC,EAAOD,EAAEE,cAAcC,MACvBf,EAAgBG,KAAKa,wBAAwBH,GACnDV,KAAKc,SAAS,CACVjB,oB,8CAMgBa,GAAO,IAAD,OA6B3B,OAAO,IAAIK,SAAQ,SAAAC,GACd,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,YAAW,WACPC,QAAQC,IAAI,cACZ,IAAMzB,EAAgBC,EAAYyB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,cAAcC,SAASjB,EAAKgB,kBAExF,EAAKZ,SAAS,CACVjB,oBAELoB,Q,0CAUTW,MAAM,kBAAmB,CACrBC,KAAM,UACN,eAAgB,qBAEnBC,MAAK,SAAAC,GAMF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAEFZ,QAAQC,IAAIW,MAEfC,OAAM,SAAAC,W,GAnGOC,IAAMC,WA6GlBC,E,uKACM,IAAD,EACkBtC,KAAKC,MAArBO,EADF,EACEA,MADF,EACST,MACd,OAAIS,EAAM+B,OAAS,EAEX,6BACI,wBAAIrC,UAAU,qCACTM,EAAMgC,KAAI,SAACC,EAAMC,GAAP,OACP,kBAAC,EAAD,CAAaC,GAAIF,EAAKE,GAAI5C,MAAO0C,EAAKhB,MAAOmB,KAAMH,EAAKI,YAMjE,8C,GAdST,IAAMC,WAmB1BS,E,uKACM,IAAD,EACuB9C,KAAKC,MAAzB0C,EADH,EACGA,GAAI5C,EADP,EACOA,MAAO6C,EADd,EACcA,KAEnB,OACI,wBAAIhC,MAAO+B,EAAGI,WAAYC,IAAKL,EAAGI,WAAY7C,UAAU,OAAO+C,QAASjD,KAAKkD,gBACzE,yBAAKC,IAHE,sCAGWjD,UAAU,0BAC5B,yBAAKA,UAAU,WACX,wBAAIA,UAAU,UAAd,MAA2ByC,EAA3B,IAAgC5C,GAChC,yBAAKG,UAAU,eAAe0C,O,qCAK/BnC,GACXY,QAAQC,IAAIb,EAAEE,cAAcC,W,GAfRwB,IAAMC,WAmB5BvC,EAAc,CAChB,CAAC6C,GAAI,EAAGlB,MAAO,QAASoB,KAAM,OAC9B,CAACF,GAAI,EAAGlB,MAAO,OAAQoB,KAAM,OAC7B,CAACF,GAAI,EAAGlB,MAAO,SAAUoB,KAAM,OAC/B,CAACF,GAAI,EAAGlB,MAAO,QAASoB,KAAM,QAGjBlD,IC/KKyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAK5D,MAAM,wBAEb6D,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.2ff7217f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App2XXX() {\n  var posts = [{title: 'A'}, {title: 'B'}, {title: 'C'}];\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Hello React World</h1>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React Now\n        </a>\n\n        <ul>      \n            {posts.map(post => (\n              <li key={post.title}>{post.title}</li>\n            ))}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor() {\n      super();\n\n      this.state = {\n          filteredUsers: allContacts\n      };\n  }\n  \n  render() {\n      const {tytul} = this.props; \n      return (\n          <div>\n              <main className=\"ui main text container\">                        \n                  <h1>{tytul}</h1>\n                  <div className=\"ui input\">\n                      <input onInput={this.filterUsers.bind(this)}\n                             type=\"text\" placeholder=\"Search...\" />\n                  </div>\n                  {this.state.filteredUsers ? <ContactList lista={this.state.filteredUsers} tytul={tytul}/> : 'Ładowanie…'}\n              </main>\n          </div>\n      );\n  }\n\n  filterUsers(e) {\n      const text = e.currentTarget.value;\n      const filteredUsers = this.getFilteredUsersForText(text)\n      this.setState({\n          filteredUsers\n      });\n  }\n\n\n  \n  getFilteredUsersForText(text) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n\n    // async function postData(url = '', data = {}) {\n    //     // Default options are marked with *\n    //     const response = await fetch(url, {\n    //       method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    //       mode: 'cors', // no-cors, *cors, same-origin\n    //       cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    //       credentials: 'same-origin', // include, *same-origin, omit\n    //       headers: {\n    //         'Content-Type': 'application/json'\n    //         // 'Content-Type': 'application/x-www-form-urlencoded',\n    //       },\n    //       redirect: 'follow', // manual, *follow, error\n    //       referrerPolicy: 'no-referrer', // no-referrer, *client\n    //       body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    //     });\n    //     return await response.json(); // parses JSON response into native JavaScript objects\n    // }\n\n    // postData('https://example.com/answer', { answer: 42 })\n    //     .then((data) => {\n    //         console.log(data); // JSON data parsed by `response.json()` call\n    //     });\n     //return allContacts.filter(user => user.title.toLowerCase().includes(text.toLowerCase()))\n\n\n\n     return new Promise(resolve => {\n          const time = (Math.random() + 1) * 250;\n          setTimeout(() => {\n              console.log('reading...');\n              const filteredUsers = allContacts.filter(user => user.title.toLowerCase().includes(text.toLowerCase()));\n              //resolve(filteredUsers);\n              this.setState({\n                  filteredUsers\n              });                    \n          }, time) ;\n      });\n\n  }\n\n  componentDidMount() {\n    // fetch(\"https://randomuser.me/api/?format=json&results=10\")\n    //   .then(res => res.json())\n    //   .then(json => this.setState({ contacts: json.results }));\n\n    fetch('cd_catalog.json', { //https://www.w3schools.com/xml/cd_catalog.xml\n        mode: 'no-cors',\n        'content-type': 'application/json'//'text/html'\n    })\n    .then(response => {\n        // response.text().then(text => {\n        //   // handle response content\n        //   var t = new window.DOMParser().parseFromString(text, \"text/xml\")\n        //   console.log(t)\n        // })\n        return response.json()\n    })\n    .then(data => {\n        // Work with JSON data here\n        console.log(data)\n    })\n    .catch(err => {\n        // Do something for an error here\n    })\n    //.then(response => console.log(response.text()))\n    //.then(str => (console.log(str))) //new window.DOMParser()).parseFromString(str, \"text/xml\")\n    //.then(data => {  console.log('test1'); console.log(data) })\n  }\n\n}    \n\nclass ContactList extends React.Component {\n  render() {\n      const {lista, tytul} = this.props;  \n      if (lista.length > 0) {      \n          return(\n              <div>\n                  <ul className=\"ui relaxed divided list selection\">      \n                      {lista.map((item, inx) => (\n                          <ContactItem id={item.id} tytul={item.title} opis={item.desc} />       \n                      ))}\n                  </ul>\n              </div>\n          );\n      } else {\n          return <p>No results!</p>;\n      }\n  }\n}\n\nclass ContactItem extends React.Component {\n  render() {\n      const { id, tytul, opis } = this.props\n      const imgUrl = \"https://api.adorable.io/avatars/55/\";\n      return (\n          <li value={id.toString()} key={id.toString()} className=\"item\" onClick={this.onClickHandler}>\n              <img src={imgUrl} className=\"ui mini rounded image\" />\n              <div className=\"content\">\n                  <h4 className=\"header\">Nr {id} {tytul}</h4>\n                  <div className=\"description\">{opis}</div>\n              </div>                \n          </li>\n      )\n  }\n  onClickHandler(e) {\n      console.log(e.currentTarget.value);\n  }\n}\n\nvar allContacts = [\n  {id: 1, title: 'Darek', desc: 'aaa'},\n  {id: 2, title: 'Anna', desc: 'bbb'}, \n  {id: 3, title: 'Celina', desc: 'ccc'},\n  {id: 4, title: 'Dawid', desc: 'ddd'}\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tytul=\"<i>Hello Folks</i>\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}